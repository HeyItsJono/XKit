{"id":"lethe","script":"//* TITLE Lethe **//\n//* VERSION 1.1.1 **//\n//* DESCRIPTION Forgets posts once they scroll off the screen. **//\n//* DEVELOPER hobinjk **//\n//* FRAME false **//\n//* BETA true **//\n\n\n/** Export Lethe */\nXKit.extensions.lethe = new Lethe();\n\nfunction Lethe() {\n  this.TOP_CUTOFF = -500;\n  this.running = false;\n  this.scrollWaiting = false;\n  this.hiddenPosts = [];\n  this.preferences = {\n    'sep0': {\n      text: 'Options',\n      type: 'separator'\n    }\n  };\n\n}\n\n/**\n * Run Lethe\n */\nLethe.prototype.run = function() {\n  if (!XKit.interface.where().dashboard) {\n    return;\n  }\n  this.running = true;\n  this.handleScroll = this.handleScroll.bind(this);\n  window.addEventListener('scroll', this.handleScroll, false);\n};\n\n/**\n * Handle a scroll event, throttling to once every 100ms\n */\nLethe.prototype.handleScroll = function() {\n  if (this.scrollWaiting) {\n    return;\n  }\n  this.scrollWaiting = true;\n  setTimeout(this.updatePosts.bind(this), 100);\n};\n\n/**\n * Update the list of tracked posts, removing ones that are above/outside the\n * viewport and adding ones that are inside or below the viewport.\n */\nLethe.prototype.updatePosts = function() {\n  this.scrollWaiting = false;\n\n  var postMedias = document.querySelectorAll('.post_media');\n  var i;\n  for (i = 0; i < postMedias.length; i++) {\n    var postMedia = postMedias[i];\n    if (postMedia.querySelector('.playing')) {\n      continue;\n    }\n    var rect = postMedia.getBoundingClientRect();\n\n    if (rect.bottom > this.TOP_CUTOFF) {\n      // Rect is fully on screen, we want to keep it\n      break;\n    }\n    this.hidePost(postMedia);\n  }\n\n  for (i = this.hiddenPosts.length - 1; i > -1; i--) {\n    var hiddenMedia = this.hiddenPosts[i];\n    if (hiddenMedia.absoluteBottom < window.scrollY + this.TOP_CUTOFF) {\n      // hiddenMedia is higher than the current viewport\n      // all other posts should also be higher\n      break;\n    }\n    this.showPost(hiddenMedia);\n  }\n};\n\n/**\n * Hide a post, storing it for later\n * @param {DOMElement} post\n */\nLethe.prototype.hidePost = function(post) {\n  var rect = post.getBoundingClientRect();\n  var placeholder = document.createElement('div');\n  placeholder.classList.add('post_media');\n  placeholder.classList.add('post_media_hidden');\n  placeholder.style.width = rect.width + 'px';\n  placeholder.style.height = rect.height + 'px';\n\n  var parentNode = post.parentNode;\n  parentNode.replaceChild(placeholder, post);\n\n  var absoluteBottom = rect.bottom + window.scrollY;\n\n  this.hiddenPosts.push({\n    absoluteBottom: absoluteBottom,\n    html: post.outerHTML,\n    parent: parentNode\n  });\n};\n\n/**\n * Show a post, removing it from hidden posts\n * @param {DOMElement} hiddenPost\n */\nLethe.prototype.showPost = function(hiddenPost) {\n  // Overly conservative removal logic\n  this.hiddenPosts = this.hiddenPosts.filter(function(post) {\n    return post !== hiddenPost;\n  });\n  hiddenPost.parent.innerHTML = hiddenPost.html;\n};\n\n\n\n/**\n * Destroy Lethe\n */\nLethe.prototype.destroy = function() {\n  if (!this.running) {\n    return;\n  }\n  this.running = false;\n  window.removeEventListener('scroll', this.handleScroll, false);\n};\n","file":"found","server":"up","errors":false,"title":"Lethe","description":"Forgets posts once they scroll off the screen.","developer":"hobinjk","version":"1.1.1","frame":"false","beta":"true","slow":"false"}